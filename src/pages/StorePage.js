import React, { useState, memo, useCallback } from 'react';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Chip,
  Tab,
  Tabs,
  Alert,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  ShoppingCart as CartIcon,
  Star as StarIcon,
  LocalOffer as OfferIcon,
  EmojiEvents as TrophyIcon,
  Favorite as HeartIcon,
  AttachMoney as MoneyIcon
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '../hooks/useAuth';
import toast from 'react-hot-toast';

// ูููู ุจุทุงูุฉ ุงูุฅูููุฌู ุงููุญุณู
const EmojiCard = memo(({ emoji, isOwned, canAfford, onSelect }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  const handleClick = useCallback(() => {
    if (!isOwned) {
      onSelect(emoji);
    }
  }, [emoji, isOwned, onSelect]);

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3 }}
      whileHover={{ scale: isOwned ? 1 : 1.05 }}
      whileTap={{ scale: 0.95 }}
    >
      <Card
        sx={{
          cursor: isOwned ? 'default' : 'pointer',
          borderRadius: { xs: 2, sm: 3 },
          border: isOwned ? '2px solid #4caf50' : canAfford ? '2px solid rgba(233, 30, 99, 0.3)' : '2px solid rgba(0,0,0,0.1)',
          background: isOwned ? 'linear-gradient(135deg, #4caf5020, #8bc34a20)' : 'white',
          transition: 'all 0.3s ease',
          position: 'relative',
          overflow: 'visible',
          '&:hover': {
            borderColor: isOwned ? '#4caf50' : '#e91e63',
            boxShadow: isOwned ? '0 8px 25px rgba(76, 175, 80, 0.3)' : '0 8px 25px rgba(233, 30, 99, 0.2)'
          }
        }}
        onClick={handleClick}
      >
        {/* ุดุงุฑุฉ "ููููู" */}
        {isOwned && (
          <Box
            sx={{
              position: 'absolute',
              top: -8,
              right: -8,
              background: '#4caf50',
              color: 'white',
              borderRadius: '50%',
              width: { xs: 24, sm: 30 },
              height: { xs: 24, sm: 30 },
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: { xs: '0.7rem', sm: '0.8rem' },
              fontWeight: 'bold',
              zIndex: 1
            }}
          >
            โ
          </Box>
        )}

        <CardContent sx={{ textAlign: 'center', p: { xs: 2, sm: 3 } }}>
          {/* ุงูุฅูููุฌู */}
          <Typography variant="h1" sx={{ fontSize: { xs: '2.5rem', sm: '4rem' }, mb: { xs: 1, sm: 2 } }}>
            {emoji.emoji}
          </Typography>

          {/* ุงุณู ุงูุฅูููุฌู */}
          <Typography 
            variant="h6" 
            className="arabic-title" 
            sx={{ 
              fontWeight: 600, 
              mb: 1,
              fontSize: { xs: '0.9rem', sm: '1.1rem' }
            }}
          >
            {emoji.name}
          </Typography>

          {/* ูุตู ุงูุฅูููุฌู */}
          <Typography 
            variant="body2" 
            className="arabic-text" 
            color="text.secondary" 
            sx={{ 
              mb: 2,
              fontSize: { xs: '0.75rem', sm: '0.85rem' }
            }}
          >
            {emoji.description}
          </Typography>

          {/* ุงูุณุนุฑ */}
          <Box 
            sx={{
              background: 'linear-gradient(135deg, #ff6b6b, #feca57)',
              color: 'white',
              padding: { xs: '4px 8px', sm: '6px 12px' },
              borderRadius: '20px',
              fontSize: { xs: '0.75rem', sm: '0.85rem' },
              fontWeight: 'bold',
              border: '2px solid rgba(255, 255, 255, 0.3)',
              boxShadow: '0 4px 12px rgba(255, 107, 107, 0.3)',
              minWidth: { xs: '40px', sm: '60px' },
              textAlign: 'center',
              display: 'inline-block',
              mb: 2
            }}
          >
            ๐ {emoji.price}
          </Box>

          {/* ุฒุฑ ุงูุดุฑุงุก */}
          {isOwned ? (
            <Chip
              label="ููููู"
              color="success"
              sx={{ 
                fontWeight: 600,
                fontSize: { xs: '0.7rem', sm: '0.8rem' }
              }}
            />
          ) : (
            <Button
              variant={canAfford ? "contained" : "outlined"}
              disabled={!canAfford}
              onClick={(e) => {
                e.stopPropagation();
                onSelect(emoji);
              }}
              sx={{
                background: canAfford ? 'linear-gradient(135deg, #e91e63, #9c27b0)' : 'transparent',
                borderColor: !canAfford ? '#ccc' : 'transparent',
                color: canAfford ? 'white' : '#999',
                borderRadius: 2,
                px: { xs: 2, sm: 3 },
                fontSize: { xs: '0.75rem', sm: '0.85rem' },
                '&:hover': {
                  background: canAfford ? 'linear-gradient(135deg, #d81b60, #8e24aa)' : 'transparent'
                }
              }}
            >
              {canAfford ? 'ุดุฑุงุก' : 'ุบูุฑ ูุชุงุญ'}
            </Button>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
});

EmojiCard.displayName = 'EmojiCard';

const StorePage = () => {
  const { userProfile, buyEmoji } = useAuth();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  
  const [selectedCategory, setSelectedCategory] = useState(0);
  const [selectedEmoji, setSelectedEmoji] = useState(null);
  const [purchaseDialog, setPurchaseDialog] = useState(false);

  // ูุฆุงุช ุงูุฅูููุฌูุงุช
  const categories = [
    { id: 'popular', name: 'ุงูุฃูุซุฑ ุดุนุจูุฉ', icon: 'โญ' },
    { id: 'animals', name: 'ุงูุญููุงูุงุช', icon: '๐พ' },
    { id: 'food', name: 'ุงูุทุนุงู', icon: '๐' },
    { id: 'sports', name: 'ุงูุฑูุงุถุฉ', icon: 'โฝ' },
    { id: 'nature', name: 'ุงูุทุจูุนุฉ', icon: '๐ฟ' },
    { id: 'premium', name: 'ูููุฒุฉ', icon: '๐' }
  ];

  // ุงูุฅูููุฌูุงุช ุงููุชุงุญุฉ
  const availableEmojis = {
    popular: [
      { emoji: '๐', name: 'ููู', price: 10, description: 'ููุดุฎุตูุงุช ุงูุฑุงุฆุนุฉ' },
      { emoji: '๐ฅ', name: 'ูุงุฑ', price: 15, description: 'ูููุญุชูู ุงูุณุงุฎู' },
      { emoji: '๐ช', name: 'ููุฉ', price: 12, description: 'ููุฃูููุงุก ูุงููุตูููู' },
      { emoji: '๐', name: 'ูุฌูุฉ', price: 18, description: 'ูููุชููุฒูู' },
      { emoji: '๐ฏ', name: 'ูุฏู', price: 14, description: 'ูููุฑูุฒูู ุนูู ุฃูุฏุงููู' },
      { emoji: 'โก', name: 'ุจุฑู', price: 16, description: 'ููุณุฑูุนูู ูุงููุดูุทูู' }
    ],
    animals: [
      { emoji: '๐ฆ', name: 'ุฃุณุฏ', price: 25, description: 'ููู ุงูุบุงุจุฉ' },
      { emoji: '๐บ', name: 'ุฐุฆุจ', price: 22, description: 'ููุดุฌุนุงู ูุงูุฃูููุงุก' },
      { emoji: '๐ฆ', name: 'ูุณุฑ', price: 28, description: 'ููุทุงูุญูู ูุงูุญุงูููู' },
      { emoji: '๐ฏ', name: 'ููุฑ', price: 30, description: 'ููููุงุชููู ุงูุดุฑุณูู' },
      { emoji: '๐ฆ', name: 'ููููููุฑู', price: 35, description: 'ูููุฑูุฏูู ูุงูุฎูุงูููู' },
      { emoji: '๐', name: 'ุชููู', price: 40, description: 'ููุฃุณุทูุฑููู ูุงููุงุฏุฉ' }
    ],
    food: [
      { emoji: '๐', name: 'ุจูุชุฒุง', price: 8, description: 'ูุนุดุงู ุงูุทุนุงู ุงูุฅูุทุงูู' },
      { emoji: '๐', name: 'ุจุฑุฌุฑ', price: 7, description: 'ููุฌูุนุงููู ุฏุงุฆูุงู' },
      { emoji: '๐ฐ', name: 'ููู', price: 12, description: 'ููู ูุญุจ ุงูุญูููุงุช' },
      { emoji: '๐', name: 'ุดูุฑุจุฉ', price: 6, description: 'ููุทุนุงู ุงููุฑูุญ' },
      { emoji: '๐', name: 'ูุฑุงููุฉ', price: 10, description: 'ููุตุญููู ูุงููุฐูุฐ' },
      { emoji: '๐ฏ', name: 'ุนุณู', price: 15, description: 'ููุญูู ูุงูุทุจูุนู' }
    ],
    sports: [
      { emoji: 'โฝ', name: 'ูุฑุฉ ูุฏู', price: 15, description: 'ูุนุดุงู ุงููุฑุฉ ุงูููููุฉ' },
      { emoji: '๐', name: 'ูุฑุฉ ุณูุฉ', price: 14, description: 'ููุงุนุจูู ุงูุทูุงู' },
      { emoji: '๐พ', name: 'ุชูุณ', price: 16, description: 'ููุฑูุงุถููู ุงูุฃููููู' },
      { emoji: '๐', name: 'ุณุจุงุญุฉ', price: 18, description: 'ูุนุดุงู ุงููุงุก' },
      { emoji: '๐ด', name: 'ุฏุฑุงุฌุฉ', price: 12, description: 'ูููุบุงูุฑูู ูุงููุดูุทูู' },
      { emoji: '๐', name: 'ุฌุฑู', price: 10, description: 'ููุนุฏุงุฆูู ูุงูุณุฑูุนูู' }
    ],
    nature: [
      { emoji: '๐ณ', name: 'ุดุฌุฑุฉ', price: 12, description: 'ููุญุจู ุงูุทุจูุนุฉ' },
      { emoji: '๐บ', name: 'ุฒูุฑุฉ', price: 8, description: 'ููุฌููููู ูุงูุฑููููู' },
      { emoji: '๐', name: 'ููุฑ', price: 20, description: 'ููุญุงูููู ูุงููููููู' },
      { emoji: 'โญ', name: 'ูุฌูุฉ', price: 15, description: 'ูููุชุฃูููู' },
      { emoji: '๐', name: 'ููุณ ูุฒุญ', price: 25, description: 'ูููุชูุงุฆููู ูุงููููููู' },
      { emoji: '๐', name: 'ููุฌุฉ', price: 18, description: 'ููุญุจู ุงูุจุญุฑ' }
    ],
    premium: [
      { emoji: '๐', name: 'ุชุงุฌ', price: 50, description: 'ูููููู ูุงููููุงุช' },
      { emoji: '๐', name: 'ูุงุณุฉ', price: 45, description: 'ููุซููููู ูุงููุงุฏุฑูู' },
      { emoji: '๐', name: 'ูุฃุณ', price: 40, description: 'ูููุงุฆุฒูู ูุงูุจุทู' },
      { emoji: '๐๏ธ', name: 'ููุฏุงููุฉ', price: 35, description: 'ูููุชููุฒูู ูุงูุดุฑูุงุก' },
      { emoji: 'โ๏ธ', name: 'ุณูู', price: 42, description: 'ูููุญุงุฑุจูู ูุงูุดุฌุนุงู' },
      { emoji: '๐ก๏ธ', name: 'ุฏุฑุน', price: 38, description: 'ููุญูุงุฉ ูุงููุฏุงูุนูู' }
    ]
  };

  // ุดุฑุงุก ุฅูููุฌู
  const handlePurchase = useCallback(async () => {
    if (!selectedEmoji) return;

    const success = await buyEmoji(selectedEmoji);
    if (success) {
      setPurchaseDialog(false);
      setSelectedEmoji(null);
      toast.success(`ุชู ุดุฑุงุก ${selectedEmoji.name} ุจูุฌุงุญ! ๐`);
    }
  }, [selectedEmoji, buyEmoji]);

  // ุชุญูู ูู ููููุฉ ุงูุฅูููุฌู
  const isOwned = useCallback((emoji) => {
    if (!userProfile?.emojis) return false;
    return userProfile.emojis.some(owned => {
      // ุงูุชุญูู ูู ุงูุชูุณููุงุช ุงููุฎุชููุฉ ููุฅูููุฌูุงุช ุงููููููุฉ
      if (typeof owned === 'string') {
        return owned === emoji.emoji;
      }
      if (typeof owned === 'object' && owned.emoji) {
        return owned.emoji === emoji.emoji;
      }
      return false;
    });
  }, [userProfile?.emojis]);

  // ูุนุงูุฌ ุงุฎุชูุงุฑ ุงูุฅูููุฌู
  const handleSelectEmoji = useCallback((emoji) => {
    setSelectedEmoji(emoji);
    setPurchaseDialog(true);
  }, []);

  return (
    <Box sx={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%)',
      pb: { xs: 2, sm: 4 }
    }}>
      <Container maxWidth="lg" sx={{ py: { xs: 2, sm: 4 }, px: { xs: 1, sm: 2 } }}>
        {/* ุฑุฃุณ ุงูุตูุญุฉ */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Card 
            className="glass-card" 
            sx={{ 
              mb: { xs: 2, sm: 4 }, 
              textAlign: 'center',
              borderRadius: { xs: 2, sm: 3 }
            }}
          >
            <CardContent sx={{ p: { xs: 3, sm: 4 } }}>
              <Typography 
                variant="h3" 
                className="arabic-title gradient-text" 
                sx={{ 
                  mb: 2,
                  fontSize: { xs: '1.8rem', sm: '2.5rem' }
                }}
              >
                ๐๏ธ ูุชุฌุฑ ุงูุฅูููุฌูุงุช
              </Typography>
              <Typography 
                variant="h6" 
                className="arabic-text" 
                color="text.secondary" 
                sx={{ 
                  mb: 3,
                  fontSize: { xs: '1rem', sm: '1.25rem' }
                }}
              >
                ุงุดุชุฑู ุฅูููุฌูุงุช ูุฑูุฏุฉ ูุชุฒููู ูููู ุงูุดุฎุตู!
              </Typography>

              {/* ุฑุตูุฏ ุงููุณุชุฎุฏู */}
              <Box 
                sx={{
                  background: 'linear-gradient(135deg, #ff6b6b, #feca57)',
                  color: 'white',
                  padding: { xs: '8px 16px', sm: '12px 24px' },
                  borderRadius: '25px',
                  fontSize: { xs: '1.1rem', sm: '1.5rem' },
                  fontWeight: 'bold',
                  border: '2px solid rgba(255, 255, 255, 0.3)',
                  boxShadow: '0 4px 12px rgba(255, 107, 107, 0.3)',
                  display: 'inline-flex',
                  alignItems: 'center',
                  gap: 1,
                  mb: 2
                }}
              >
                ๐ ุฑุตูุฏู: {userProfile?.dragons || 0}
              </Box>

              <Typography 
                variant="body2" 
                className="arabic-text" 
                color="text.secondary"
                sx={{ fontSize: { xs: '0.8rem', sm: '0.9rem' } }}
              >
                ุงูุณุจ ุงููุฒูุฏ ูู ุงูููุงุท ุนุจุฑ ูุนุจ ุงูุฃูุนุงุจ! ๐ฎ
              </Typography>
            </CardContent>
          </Card>
        </motion.div>

        {/* ุชุจููุจุงุช ุงููุฆุงุช */}
        <Card 
          className="glass-card" 
          sx={{ 
            mb: { xs: 2, sm: 4 },
            borderRadius: { xs: 2, sm: 3 }
          }}
        >
          <Tabs
            value={selectedCategory}
            onChange={(e, newValue) => setSelectedCategory(newValue)}
            variant="scrollable"
            scrollButtons="auto"
            sx={{
              borderBottom: '1px solid rgba(0,0,0,0.1)',
              '& .MuiTab-root': {
                fontFamily: 'Noto Sans Arabic, Tajawal, sans-serif',
                fontWeight: 600,
                minWidth: { xs: 80, sm: 120 },
                fontSize: { xs: '0.8rem', sm: '0.9rem' }
              },
              '& .Mui-selected': {
                color: '#e91e63'
              }
            }}
          >
            {categories.map((category, index) => (
              <Tab
                key={category.id}
                label={
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: { xs: 0.5, sm: 1 } }}>
                    <span>{category.icon}</span>
                    <span style={{ fontSize: isMobile ? '0.7rem' : '0.9rem' }}>
                      {category.name}
                    </span>
                  </Box>
                }
              />
            ))}
          </Tabs>

          <CardContent sx={{ p: { xs: 2, sm: 3 } }}>
            {/* ุนุฑุถ ุงูุฅูููุฌูุงุช */}
            <AnimatePresence mode="wait">
              <motion.div
                key={selectedCategory}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
              >
                <Grid container spacing={{ xs: 2, sm: 3 }}>
                  {availableEmojis[categories[selectedCategory].id]?.map((emoji, index) => (
                    <Grid item xs={6} sm={4} md={3} lg={2} key={`${emoji.emoji}-${index}`}>
                      <motion.div
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                      >
                        <EmojiCard
                          emoji={emoji}
                          isOwned={isOwned(emoji)}
                          canAfford={(userProfile?.dragons || 0) >= emoji.price}
                          onSelect={handleSelectEmoji}
                        />
                      </motion.div>
                    </Grid>
                  ))}
                </Grid>
              </motion.div>
            </AnimatePresence>
          </CardContent>
        </Card>

        {/* ูุตุงุฆุญ ุงูุดุฑุงุก */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.6 }}
        >
          <Alert
            severity="info"
            sx={{
              borderRadius: { xs: 2, sm: 3 },
              '& .MuiAlert-message': {
                fontFamily: 'Noto Sans Arabic, Tajawal, sans-serif',
                fontSize: { xs: '0.8rem', sm: '0.9rem' }
              }
            }}
          >
            ๐ก ูุตูุญุฉ: ุงูุนุจ ูู ูุณู ุงูุฃูุนุงุจ ููุณุจ ุงููุฒูุฏ ูู ููุงุท ุงูุฏุฑุงุบูู ูุดุฑุงุก ุงููุฒูุฏ ูู ุงูุฅูููุฌูุงุช ุงูุฑุงุฆุนุฉ!
          </Alert>
        </motion.div>
      </Container>

      {/* ูุงูุฐุฉ ุชุฃููุฏ ุงูุดุฑุงุก */}
      <Dialog
        open={purchaseDialog}
        onClose={() => setPurchaseDialog(false)}
        maxWidth="xs"
        fullWidth
        fullScreen={isMobile}
        PaperProps={{
          sx: {
            borderRadius: isMobile ? 0 : 3,
            background: 'rgba(255, 255, 255, 0.95)',
            backdropFilter: 'blur(10px)'
          }
        }}
      >
        <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>
          <Typography 
            className="arabic-title gradient-text"
            sx={{ fontSize: { xs: '1.1rem', sm: '1.25rem' } }}
          >
            ุชุฃููุฏ ุงูุดุฑุงุก
          </Typography>
        </DialogTitle>

        <DialogContent sx={{ textAlign: 'center', py: 2 }}>
          {selectedEmoji && (
            <>
              <Typography variant="h1" sx={{ fontSize: { xs: '3rem', sm: '4rem' }, mb: 2 }}>
                {selectedEmoji.emoji}
              </Typography>
              
              <Typography 
                variant="h6" 
                className="arabic-title" 
                sx={{ 
                  mb: 1,
                  fontSize: { xs: '1rem', sm: '1.1rem' }
                }}
              >
                {selectedEmoji.name}
              </Typography>
              
              <Typography 
                variant="body2" 
                className="arabic-text" 
                color="text.secondary" 
                sx={{ 
                  mb: 3,
                  fontSize: { xs: '0.8rem', sm: '0.85rem' }
                }}
              >
                {selectedEmoji.description}
              </Typography>

              <Box 
                sx={{
                  background: 'linear-gradient(135deg, #ff6b6b, #feca57)',
                  color: 'white',
                  padding: { xs: '8px 16px', sm: '12px 24px' },
                  borderRadius: '25px',
                  fontSize: { xs: '1rem', sm: '1.2rem' },
                  fontWeight: 'bold',
                  display: 'inline-block',
                  mb: 2
                }}
              >
                ๐ {selectedEmoji.price}
              </Box>

              <Typography 
                variant="caption" 
                color="text.secondary"
                sx={{ 
                  display: 'block',
                  fontSize: { xs: '0.7rem', sm: '0.75rem' }
                }}
              >
                ุฑุตูุฏู ุงูุญุงูู: {userProfile?.dragons || 0}
              </Typography>
            </>
          )}
        </DialogContent>

        <DialogActions sx={{ justifyContent: 'center', pb: 3, px: 3 }}>
          <Button 
            onClick={() => setPurchaseDialog(false)}
            sx={{ 
              mr: 1,
              fontSize: { xs: '0.8rem', sm: '0.9rem' }
            }}
          >
            ุฅูุบุงุก
          </Button>
          <Button
            onClick={handlePurchase}
            variant="contained"
            disabled={!selectedEmoji || (userProfile?.dragons || 0) < (selectedEmoji?.price || 0)}
            sx={{
              background: 'linear-gradient(135deg, #e91e63, #9c27b0)',
              fontSize: { xs: '0.8rem', sm: '0.9rem' },
              px: 3,
              '&:hover': {
                background: 'linear-gradient(135deg, #d81b60, #8e24aa)'
              }
            }}
          >
            ุชุฃููุฏ ุงูุดุฑุงุก
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default StorePage;
